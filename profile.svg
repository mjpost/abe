<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg --pid 99039</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="6400"><g><title>beam_search (ensembling/search.py:185) (234 samples, 3.66%)</title><rect x="0.0938%" y="116" width="3.6562%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="234"/><text x="0.3438%" y="126.50">beam..</text></g><g><title>__lt__ (ensembling/search.py:52) (92 samples, 1.44%)</title><rect x="2.3125%" y="132" width="1.4375%" height="15" fill="rgb(217,0,24)" fg:x="148" fg:w="92"/><text x="2.5625%" y="142.50"></text></g><g><title>beam_search (ensembling/search.py:187) (144 samples, 2.25%)</title><rect x="3.7500%" y="116" width="2.2500%" height="15" fill="rgb(221,193,54)" fg:x="240" fg:w="144"/><text x="4.0000%" y="126.50">b..</text></g><g><title>__init__ (ensembling/search.py:33) (409 samples, 6.39%)</title><rect x="6.2500%" y="148" width="6.3906%" height="15" fill="rgb(248,212,6)" fg:x="400" fg:w="409"/><text x="6.5000%" y="158.50">__init__..</text></g><g><title>&lt;listcomp&gt; (ensembling/search.py:33) (311 samples, 4.86%)</title><rect x="7.7812%" y="164" width="4.8594%" height="15" fill="rgb(208,68,35)" fg:x="498" fg:w="311"/><text x="8.0312%" y="174.50">&lt;listc..</text></g><g><title>expand_frontier (ensembling/search.py:107) (638 samples, 9.97%)</title><rect x="6.0781%" y="132" width="9.9688%" height="15" fill="rgb(232,128,0)" fg:x="389" fg:w="638"/><text x="6.3281%" y="142.50">expand_frontie..</text></g><g><title>__init__ (ensembling/search.py:34) (218 samples, 3.41%)</title><rect x="12.6406%" y="148" width="3.4062%" height="15" fill="rgb(207,160,47)" fg:x="809" fg:w="218"/><text x="12.8906%" y="158.50">__i..</text></g><g><title>&lt;listcomp&gt; (ensembling/search.py:34) (109 samples, 1.70%)</title><rect x="14.3438%" y="164" width="1.7031%" height="15" fill="rgb(228,23,34)" fg:x="918" fg:w="109"/><text x="14.5938%" y="174.50"></text></g><g><title>__len__ (torch/_tensor.py:1022) (16 samples, 0.25%)</title><rect x="16.3438%" y="148" width="0.2500%" height="15" fill="rgb(218,30,26)" fg:x="1046" fg:w="16"/><text x="16.5938%" y="158.50"></text></g><g><title>expand_frontier (ensembling/search.py:94) (29 samples, 0.45%)</title><rect x="16.2656%" y="132" width="0.4531%" height="15" fill="rgb(220,122,19)" fg:x="1041" fg:w="29"/><text x="16.5156%" y="142.50"></text></g><g><title>__len__ (torch/_tensor.py:1031) (8 samples, 0.12%)</title><rect x="16.5938%" y="148" width="0.1250%" height="15" fill="rgb(250,228,42)" fg:x="1062" fg:w="8"/><text x="16.8438%" y="158.50"></text></g><g><title>expand_frontier (ensembling/search.py:96) (72 samples, 1.12%)</title><rect x="16.7500%" y="132" width="1.1250%" height="15" fill="rgb(240,193,28)" fg:x="1072" fg:w="72"/><text x="17.0000%" y="142.50"></text></g><g><title>expand_frontier (ensembling/search.py:97) (12 samples, 0.19%)</title><rect x="17.8750%" y="132" width="0.1875%" height="15" fill="rgb(216,20,37)" fg:x="1144" fg:w="12"/><text x="18.1250%" y="142.50"></text></g><g><title>id_to_token (ensembling/models.py:388) (138 samples, 2.16%)</title><rect x="18.2969%" y="148" width="2.1562%" height="15" fill="rgb(206,188,39)" fg:x="1171" fg:w="138"/><text x="18.5469%" y="158.50">i..</text></g><g><title>expand_frontier (ensembling/search.py:98) (206 samples, 3.22%)</title><rect x="18.0625%" y="132" width="3.2188%" height="15" fill="rgb(217,207,13)" fg:x="1156" fg:w="206"/><text x="18.3125%" y="142.50">exp..</text></g><g><title>id_to_token (ensembling/models.py:389) (53 samples, 0.83%)</title><rect x="20.4531%" y="148" width="0.8281%" height="15" fill="rgb(231,73,38)" fg:x="1309" fg:w="53"/><text x="20.7031%" y="158.50"></text></g><g><title>beam_search (ensembling/search.py:196) (981 samples, 15.33%)</title><rect x="6.0156%" y="116" width="15.3281%" height="15" fill="rgb(225,20,46)" fg:x="385" fg:w="981"/><text x="6.2656%" y="126.50">beam_search (ensembling..</text></g><g><title>__str__ (ensembling/search.py:43) (7 samples, 0.11%)</title><rect x="21.4531%" y="148" width="0.1094%" height="15" fill="rgb(210,31,41)" fg:x="1373" fg:w="7"/><text x="21.7031%" y="158.50"></text></g><g><title>beam_search (ensembling/search.py:197) (138 samples, 2.16%)</title><rect x="21.3438%" y="116" width="2.1562%" height="15" fill="rgb(221,200,47)" fg:x="1366" fg:w="138"/><text x="21.5938%" y="126.50">b..</text></g><g><title>__hash__ (ensembling/search.py:48) (134 samples, 2.09%)</title><rect x="21.4062%" y="132" width="2.0938%" height="15" fill="rgb(226,26,5)" fg:x="1370" fg:w="134"/><text x="21.6562%" y="142.50">_..</text></g><g><title>__str__ (ensembling/search.py:44) (124 samples, 1.94%)</title><rect x="21.5625%" y="148" width="1.9375%" height="15" fill="rgb(249,33,26)" fg:x="1380" fg:w="124"/><text x="21.8125%" y="158.50">_..</text></g><g><title>&lt;listcomp&gt; (ensembling/search.py:44) (118 samples, 1.84%)</title><rect x="21.6562%" y="164" width="1.8438%" height="15" fill="rgb(235,183,28)" fg:x="1386" fg:w="118"/><text x="21.9062%" y="174.50">&lt;..</text></g><g><title>beam_search (ensembling/search.py:198) (101 samples, 1.58%)</title><rect x="23.5000%" y="116" width="1.5781%" height="15" fill="rgb(221,5,38)" fg:x="1504" fg:w="101"/><text x="23.7500%" y="126.50"></text></g><g><title>__hash__ (ensembling/search.py:48) (97 samples, 1.52%)</title><rect x="23.5625%" y="132" width="1.5156%" height="15" fill="rgb(247,18,42)" fg:x="1508" fg:w="97"/><text x="23.8125%" y="142.50"></text></g><g><title>__str__ (ensembling/search.py:44) (95 samples, 1.48%)</title><rect x="23.5938%" y="148" width="1.4844%" height="15" fill="rgb(241,131,45)" fg:x="1510" fg:w="95"/><text x="23.8438%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (ensembling/search.py:44) (91 samples, 1.42%)</title><rect x="23.6562%" y="164" width="1.4219%" height="15" fill="rgb(249,31,29)" fg:x="1514" fg:w="91"/><text x="23.9062%" y="174.50"></text></g><g><title>beam_search (ensembling/search.py:199) (131 samples, 2.05%)</title><rect x="25.0781%" y="116" width="2.0469%" height="15" fill="rgb(225,111,53)" fg:x="1605" fg:w="131"/><text x="25.3281%" y="126.50">b..</text></g><g><title>__lt__ (ensembling/search.py:52) (67 samples, 1.05%)</title><rect x="26.0781%" y="132" width="1.0469%" height="15" fill="rgb(238,160,17)" fg:x="1669" fg:w="67"/><text x="26.3281%" y="142.50"></text></g><g><title>compatibility (ensembling/utils.py:22) (129 samples, 2.02%)</title><rect x="27.2188%" y="132" width="2.0156%" height="15" fill="rgb(214,148,48)" fg:x="1742" fg:w="129"/><text x="27.4688%" y="142.50">c..</text></g><g><title>extend_beam_string (ensembling/models.py:371) (500 samples, 7.81%)</title><rect x="29.3438%" y="148" width="7.8125%" height="15" fill="rgb(232,36,49)" fg:x="1878" fg:w="500"/><text x="29.5938%" y="158.50">extend_beam..</text></g><g><title>extend_beam_string (ensembling/models.py:373) (20 samples, 0.31%)</title><rect x="37.1562%" y="148" width="0.3125%" height="15" fill="rgb(209,103,24)" fg:x="2378" fg:w="20"/><text x="37.4062%" y="158.50"></text></g><g><title>id_to_token (ensembling/models.py:386) (19 samples, 0.30%)</title><rect x="39.0781%" y="180" width="0.2969%" height="15" fill="rgb(229,88,8)" fg:x="2501" fg:w="19"/><text x="39.3281%" y="190.50"></text></g><g><title>id_to_token (ensembling/models.py:387) (7 samples, 0.11%)</title><rect x="39.3750%" y="180" width="0.1094%" height="15" fill="rgb(213,181,19)" fg:x="2520" fg:w="7"/><text x="39.6250%" y="190.50"></text></g><g><title>id_to_token (ensembling/models.py:388) (261 samples, 4.08%)</title><rect x="39.4844%" y="180" width="4.0781%" height="15" fill="rgb(254,191,54)" fg:x="2527" fg:w="261"/><text x="39.7344%" y="190.50">id_t..</text></g><g><title>_decode (ensembling/models.py:411) (470 samples, 7.34%)</title><rect x="37.9531%" y="164" width="7.3438%" height="15" fill="rgb(241,83,37)" fg:x="2429" fg:w="470"/><text x="38.2031%" y="174.50">_decode (e..</text></g><g><title>id_to_token (ensembling/models.py:389) (111 samples, 1.73%)</title><rect x="43.5625%" y="180" width="1.7344%" height="15" fill="rgb(233,36,39)" fg:x="2788" fg:w="111"/><text x="43.8125%" y="190.50"></text></g><g><title>_decode (ensembling/models.py:412) (24 samples, 0.38%)</title><rect x="45.2969%" y="164" width="0.3750%" height="15" fill="rgb(226,3,54)" fg:x="2899" fg:w="24"/><text x="45.5469%" y="174.50"></text></g><g><title>_decode (ensembling/models.py:413) (27 samples, 0.42%)</title><rect x="45.6719%" y="164" width="0.4219%" height="15" fill="rgb(245,192,40)" fg:x="2923" fg:w="27"/><text x="45.9219%" y="174.50"></text></g><g><title>_decode (ensembling/models.py:422) (10 samples, 0.16%)</title><rect x="46.2344%" y="164" width="0.1562%" height="15" fill="rgb(238,167,29)" fg:x="2959" fg:w="10"/><text x="46.4844%" y="174.50"></text></g><g><title>_decode (ensembling/models.py:430) (22 samples, 0.34%)</title><rect x="46.4531%" y="164" width="0.3438%" height="15" fill="rgb(232,182,51)" fg:x="2973" fg:w="22"/><text x="46.7031%" y="174.50"></text></g><g><title>convert_tokens_to_string (transformers/models/marian/tokenization_marian.py:276) (12 samples, 0.19%)</title><rect x="46.9844%" y="180" width="0.1875%" height="15" fill="rgb(231,60,39)" fg:x="3007" fg:w="12"/><text x="47.2344%" y="190.50"></text></g><g><title>&lt;listcomp&gt; (transformers/tokenization_utils_base.py:1352) (186 samples, 2.91%)</title><rect x="51.0469%" y="212" width="2.9062%" height="15" fill="rgb(208,69,12)" fg:x="3267" fg:w="186"/><text x="51.2969%" y="222.50">&lt;l..</text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1334) (9 samples, 0.14%)</title><rect x="53.9531%" y="212" width="0.1406%" height="15" fill="rgb(235,93,37)" fg:x="3453" fg:w="9"/><text x="54.2031%" y="222.50"></text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1335) (34 samples, 0.53%)</title><rect x="54.0938%" y="212" width="0.5312%" height="15" fill="rgb(213,116,39)" fg:x="3462" fg:w="34"/><text x="54.3438%" y="222.50"></text></g><g><title>special_tokens_map_extended (transformers/tokenization_utils_base.py:1318) (73 samples, 1.14%)</title><rect x="56.8125%" y="228" width="1.1406%" height="15" fill="rgb(222,207,29)" fg:x="3636" fg:w="73"/><text x="57.0625%" y="238.50"></text></g><g><title>special_tokens_map_extended (transformers/tokenization_utils_base.py:1319) (837 samples, 13.08%)</title><rect x="57.9531%" y="228" width="13.0781%" height="15" fill="rgb(206,96,30)" fg:x="3709" fg:w="837"/><text x="58.2031%" y="238.50">special_tokens_map_e..</text></g><g><title>special_tokens_map_extended (transformers/tokenization_utils_base.py:1320) (33 samples, 0.52%)</title><rect x="71.0312%" y="228" width="0.5156%" height="15" fill="rgb(218,138,4)" fg:x="4546" fg:w="33"/><text x="71.2812%" y="238.50"></text></g><g><title>special_tokens_map_extended (transformers/tokenization_utils_base.py:1321) (66 samples, 1.03%)</title><rect x="71.5469%" y="228" width="1.0312%" height="15" fill="rgb(250,191,14)" fg:x="4579" fg:w="66"/><text x="71.7969%" y="238.50"></text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1336) (1,159 samples, 18.11%)</title><rect x="54.6250%" y="212" width="18.1094%" height="15" fill="rgb(239,60,40)" fg:x="3496" fg:w="1159"/><text x="54.8750%" y="222.50">all_special_tokens_extended ..</text></g><g><title>special_tokens_map_extended (transformers/tokenization_utils_base.py:1322) (10 samples, 0.16%)</title><rect x="72.5781%" y="228" width="0.1562%" height="15" fill="rgb(206,27,48)" fg:x="4645" fg:w="10"/><text x="72.8281%" y="238.50"></text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1337) (186 samples, 2.91%)</title><rect x="72.7344%" y="212" width="2.9062%" height="15" fill="rgb(225,35,8)" fg:x="4655" fg:w="186"/><text x="72.9844%" y="222.50">al..</text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1338) (17 samples, 0.27%)</title><rect x="75.6406%" y="212" width="0.2656%" height="15" fill="rgb(250,213,24)" fg:x="4841" fg:w="17"/><text x="75.8906%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (transformers/tokenization_utils_base.py:1338) (8 samples, 0.12%)</title><rect x="75.7812%" y="228" width="0.1250%" height="15" fill="rgb(247,123,22)" fg:x="4850" fg:w="8"/><text x="76.0312%" y="238.50"></text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1340) (283 samples, 4.42%)</title><rect x="75.9062%" y="212" width="4.4219%" height="15" fill="rgb(231,138,38)" fg:x="4858" fg:w="283"/><text x="76.1562%" y="222.50">all_s..</text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1341) (342 samples, 5.34%)</title><rect x="80.3281%" y="212" width="5.3438%" height="15" fill="rgb(231,145,46)" fg:x="5141" fg:w="342"/><text x="80.5781%" y="222.50">all_spe..</text></g><g><title>all_special_tokens_extended (transformers/tokenization_utils_base.py:1342) (95 samples, 1.48%)</title><rect x="85.6719%" y="212" width="1.4844%" height="15" fill="rgb(251,118,11)" fg:x="5483" fg:w="95"/><text x="85.9219%" y="222.50"></text></g><g><title>all_special_tokens (transformers/tokenization_utils_base.py:1352) (2,478 samples, 38.72%)</title><rect x="48.5312%" y="196" width="38.7188%" height="15" fill="rgb(217,147,25)" fg:x="3106" fg:w="2478"/><text x="48.7812%" y="206.50">all_special_tokens (transformers/tokenization_utils_base.py:135..</text></g><g><title>convert_tokens_to_string (transformers/models/marian/tokenization_marian.py:278) (2,566 samples, 40.09%)</title><rect x="47.1719%" y="180" width="40.0938%" height="15" fill="rgb(247,81,37)" fg:x="3019" fg:w="2566"/><text x="47.4219%" y="190.50">convert_tokens_to_string (transformers/models/marian/tokenization..</text></g><g><title>convert_tokens_to_string (transformers/models/marian/tokenization_marian.py:282) (38 samples, 0.59%)</title><rect x="87.2656%" y="180" width="0.5938%" height="15" fill="rgb(209,12,38)" fg:x="5585" fg:w="38"/><text x="87.5156%" y="190.50"></text></g><g><title>convert_tokens_to_string (transformers/models/marian/tokenization_marian.py:283) (550 samples, 8.59%)</title><rect x="87.8594%" y="180" width="8.5938%" height="15" fill="rgb(227,1,9)" fg:x="5623" fg:w="550"/><text x="88.1094%" y="190.50">convert_toke..</text></g><g><title>DecodePieces (sentencepiece/__init__.py:872) (541 samples, 8.45%)</title><rect x="88.0000%" y="196" width="8.4531%" height="15" fill="rgb(248,47,43)" fg:x="5632" fg:w="541"/><text x="88.2500%" y="206.50">DecodePieces..</text></g><g><title>Decode (sentencepiece/__init__.py:803) (519 samples, 8.11%)</title><rect x="88.3438%" y="212" width="8.1094%" height="15" fill="rgb(221,10,30)" fg:x="5654" fg:w="519"/><text x="88.5938%" y="222.50">Decode (sen..</text></g><g><title>_DecodePieces (sentencepiece/__init__.py:349) (515 samples, 8.05%)</title><rect x="88.4062%" y="228" width="8.0469%" height="15" fill="rgb(210,229,1)" fg:x="5658" fg:w="515"/><text x="88.6562%" y="238.50">_DecodePiec..</text></g><g><title>_decode (ensembling/models.py:432) (3,181 samples, 49.70%)</title><rect x="46.8125%" y="164" width="49.7031%" height="15" fill="rgb(222,148,37)" fg:x="2996" fg:w="3181"/><text x="47.0625%" y="174.50">_decode (ensembling/models.py:432)</text></g><g><title>_decode (ensembling/models.py:435) (7 samples, 0.11%)</title><rect x="96.5156%" y="164" width="0.1094%" height="15" fill="rgb(234,67,33)" fg:x="6177" fg:w="7"/><text x="96.7656%" y="174.50"></text></g><g><title>compatibility (ensembling/utils.py:25) (4,321 samples, 67.52%)</title><rect x="29.2344%" y="132" width="67.5156%" height="15" fill="rgb(247,98,35)" fg:x="1871" fg:w="4321"/><text x="29.4844%" y="142.50">compatibility (ensembling/utils.py:25)</text></g><g><title>extend_beam_string (ensembling/models.py:374) (3,794 samples, 59.28%)</title><rect x="37.4688%" y="148" width="59.2812%" height="15" fill="rgb(247,138,52)" fg:x="2398" fg:w="3794"/><text x="37.7188%" y="158.50">extend_beam_string (ensembling/models.py:374)</text></g><g><title>compatibility (ensembling/utils.py:29) (131 samples, 2.05%)</title><rect x="96.7500%" y="132" width="2.0469%" height="15" fill="rgb(213,79,30)" fg:x="6192" fg:w="131"/><text x="97.0000%" y="142.50">c..</text></g><g><title>&lt;listcomp&gt; (ensembling/utils.py:29) (123 samples, 1.92%)</title><rect x="96.8750%" y="148" width="1.9219%" height="15" fill="rgb(246,177,23)" fg:x="6200" fg:w="123"/><text x="97.1250%" y="158.50">&lt;..</text></g><g><title>is_eos (ensembling/models.py:348) (116 samples, 1.81%)</title><rect x="96.9844%" y="164" width="1.8125%" height="15" fill="rgb(230,62,27)" fg:x="6207" fg:w="116"/><text x="97.2344%" y="174.50">i..</text></g><g><title>compatibility (ensembling/utils.py:48) (8 samples, 0.12%)</title><rect x="98.8281%" y="132" width="0.1250%" height="15" fill="rgb(216,154,8)" fg:x="6325" fg:w="8"/><text x="99.0781%" y="142.50"></text></g><g><title>compatibility (ensembling/utils.py:53) (8 samples, 0.12%)</title><rect x="99.1094%" y="132" width="0.1250%" height="15" fill="rgb(244,35,45)" fg:x="6343" fg:w="8"/><text x="99.3594%" y="142.50"></text></g><g><title>beam_search (ensembling/search.py:202) (4,618 samples, 72.16%)</title><rect x="27.1250%" y="116" width="72.1562%" height="15" fill="rgb(251,115,12)" fg:x="1736" fg:w="4618"/><text x="27.3750%" y="126.50">beam_search (ensembling/search.py:202)</text></g><g><title>ensemble_beam_search (ensembling/ensemble.py:111) (6,357 samples, 99.33%)</title><rect x="0.0000%" y="100" width="99.3281%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="6357"/><text x="0.2500%" y="110.50">ensemble_beam_search (ensembling/ensemble.py:111)</text></g><g><title>forward (transformers/models/marian/modeling_marian.py:1400) (9 samples, 0.14%)</title><rect x="99.3750%" y="164" width="0.1406%" height="15" fill="rgb(233,84,52)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="174.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (9 samples, 0.14%)</title><rect x="99.3750%" y="180" width="0.1406%" height="15" fill="rgb(207,117,47)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (9 samples, 0.14%)</title><rect x="99.3750%" y="196" width="0.1406%" height="15" fill="rgb(249,43,39)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="206.50"></text></g><g><title>forward (transformers/models/marian/modeling_marian.py:1201) (9 samples, 0.14%)</title><rect x="99.3750%" y="212" width="0.1406%" height="15" fill="rgb(209,38,44)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="222.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (9 samples, 0.14%)</title><rect x="99.3750%" y="228" width="0.1406%" height="15" fill="rgb(236,212,23)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (9 samples, 0.14%)</title><rect x="99.3750%" y="244" width="0.1406%" height="15" fill="rgb(242,79,21)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="254.50"></text></g><g><title>forward (transformers/models/marian/modeling_marian.py:1001) (9 samples, 0.14%)</title><rect x="99.3750%" y="260" width="0.1406%" height="15" fill="rgb(211,96,35)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="270.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (9 samples, 0.14%)</title><rect x="99.3750%" y="276" width="0.1406%" height="15" fill="rgb(253,215,40)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="286.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (9 samples, 0.14%)</title><rect x="99.3750%" y="292" width="0.1406%" height="15" fill="rgb(211,81,21)" fg:x="6360" fg:w="9"/><text x="99.6250%" y="302.50"></text></g><g><title>step (ensembling/models.py:199) (16 samples, 0.25%)</title><rect x="99.3750%" y="116" width="0.2500%" height="15" fill="rgb(208,190,38)" fg:x="6360" fg:w="16"/><text x="99.6250%" y="126.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (16 samples, 0.25%)</title><rect x="99.3750%" y="132" width="0.2500%" height="15" fill="rgb(235,213,38)" fg:x="6360" fg:w="16"/><text x="99.6250%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (16 samples, 0.25%)</title><rect x="99.3750%" y="148" width="0.2500%" height="15" fill="rgb(237,122,38)" fg:x="6360" fg:w="16"/><text x="99.6250%" y="158.50"></text></g><g><title>forward (transformers/models/marian/modeling_marian.py:1650) (7 samples, 0.11%)</title><rect x="99.5156%" y="164" width="0.1094%" height="15" fill="rgb(244,218,35)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="174.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (7 samples, 0.11%)</title><rect x="99.5156%" y="180" width="0.1094%" height="15" fill="rgb(240,68,47)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (7 samples, 0.11%)</title><rect x="99.5156%" y="196" width="0.1094%" height="15" fill="rgb(210,16,53)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="206.50"></text></g><g><title>forward (transformers/models/marian/modeling_marian.py:1001) (7 samples, 0.11%)</title><rect x="99.5156%" y="212" width="0.1094%" height="15" fill="rgb(235,124,12)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="222.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1553) (7 samples, 0.11%)</title><rect x="99.5156%" y="228" width="0.1094%" height="15" fill="rgb(224,169,11)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1562) (7 samples, 0.11%)</title><rect x="99.5156%" y="244" width="0.1094%" height="15" fill="rgb(250,166,2)" fg:x="6369" fg:w="7"/><text x="99.7656%" y="254.50"></text></g><g><title>ensemble_beam_search (ensembling/ensemble.py:72) (23 samples, 0.36%)</title><rect x="99.3750%" y="100" width="0.3594%" height="15" fill="rgb(242,216,29)" fg:x="6360" fg:w="23"/><text x="99.6250%" y="110.50"></text></g><g><title>ensemble_beam_search (ensembling/ensemble.py:79) (16 samples, 0.25%)</title><rect x="99.7344%" y="100" width="0.2500%" height="15" fill="rgb(230,116,27)" fg:x="6383" fg:w="16"/><text x="99.9844%" y="110.50"></text></g><g><title>get_beam_string (ensembling/models.py:357) (10 samples, 0.16%)</title><rect x="99.8281%" y="116" width="0.1562%" height="15" fill="rgb(228,99,48)" fg:x="6389" fg:w="10"/><text x="100.0781%" y="126.50"></text></g><g><title>__format__ (torch/_tensor.py:987) (9 samples, 0.14%)</title><rect x="99.8438%" y="132" width="0.1406%" height="15" fill="rgb(253,11,6)" fg:x="6390" fg:w="9"/><text x="100.0938%" y="142.50"></text></g><g><title>__repr__ (torch/_tensor.py:463) (9 samples, 0.14%)</title><rect x="99.8438%" y="148" width="0.1406%" height="15" fill="rgb(247,143,39)" fg:x="6390" fg:w="9"/><text x="100.0938%" y="158.50"></text></g><g><title>_str (torch/_tensor_str.py:698) (9 samples, 0.14%)</title><rect x="99.8438%" y="164" width="0.1406%" height="15" fill="rgb(236,97,10)" fg:x="6390" fg:w="9"/><text x="100.0938%" y="174.50"></text></g><g><title>_str_intern (torch/_tensor_str.py:620) (9 samples, 0.14%)</title><rect x="99.8438%" y="180" width="0.1406%" height="15" fill="rgb(233,208,19)" fg:x="6390" fg:w="9"/><text x="100.0938%" y="190.50"></text></g><g><title>_tensor_str (torch/_tensor_str.py:350) (9 samples, 0.14%)</title><rect x="99.8438%" y="196" width="0.1406%" height="15" fill="rgb(216,164,2)" fg:x="6390" fg:w="9"/><text x="100.0938%" y="206.50"></text></g><g><title>all (6,400 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="6400"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (ensembling/ensemble.py:331) (6,400 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="6400"/><text x="0.2500%" y="78.50">&lt;module&gt; (ensembling/ensemble.py:331)</text></g><g><title>ensemble_models (ensembling/ensemble.py:286) (6,400 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="6400"/><text x="0.2500%" y="94.50">ensemble_models (ensembling/ensemble.py:286)</text></g></svg></svg>